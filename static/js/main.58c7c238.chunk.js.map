{"version":3,"sources":["components/Menu.js","components/App.js","serviceWorker.js","index.js"],"names":["Menu","props","react_default","a","createElement","className","visible","App","state","menu","toggleMenu","e","stopPropagation","_this","setState","closeMenu","onClick","this","src","alt","id","components_Menu","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAeeA,EAbF,SAAAC,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAMK,QAAU,OAAS,eACvCJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wBC4COG,6MAjDbC,MAAQ,CACNC,MAAM,KAGRC,WAAa,SAACC,GACZA,EAAEC,kBACFC,EAAKC,SAAS,CACZL,MAAOI,EAAKL,MAAMC,UAItBM,UAAY,SAACJ,GACXA,EAAEC,kBACFC,EAAKC,SAAS,CACZL,MAAM,6EAKR,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMW,QAASC,KAAKF,WACjCb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OACEc,IAAK,qBACLC,IAAI,kBACJC,GAAG,QACHf,UAAWY,KAAKT,MAAMC,KAAO,GAAK,SAClCO,QAASC,KAAKP,aAEhBR,EAAAC,EAAAC,cAAA,OACEc,IAAK,yBACLC,IAAI,kBACJC,GAAG,YACHf,UAAWY,KAAKT,MAAMC,KAAO,SAAW,GACxCO,QAASC,KAAKP,eAIpBR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQe,GAAG,WAAWF,IAAI,cAAcC,IAAI,SAE7DjB,EAAAC,EAAAC,cAACiB,EAAD,CAAMX,WAAYO,KAAKP,WAAYJ,QAASW,KAAKT,MAAMC,eA5C7Ca,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.58c7c238.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nconst Menu = props => {\n  return (\n    <div className={props.visible ? 'menu' : 'menu hidden'} >\n      <ul>\n        <li>Home</li>\n        <li>Projects</li>\n        <li>About Me</li>\n        <li>Contact</li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Menu\n","import React, { Component } from 'react'\nimport Menu from './Menu'\n\nclass App extends Component {\n  state = {\n    menu: true,\n  }\n\n  toggleMenu = (e) => {\n    e.stopPropagation()\n    this.setState({\n      menu: !this.state.menu,\n    })\n  }\n\n  closeMenu = (e) => {\n    e.stopPropagation()\n    this.setState({\n      menu: false,\n    })\n  }\n\n  render() {\n    return (\n      <div className='app' onClick={this.closeMenu}>\n        <div className='navbar'>\n          <div className='menu-icon'>\n            <img\n              src={'./images/close.svg'}\n              alt='image not found'\n              id='close'\n              className={this.state.menu ? '' : 'hidden'}\n              onClick={this.toggleMenu}\n            />\n            <img\n              src={'./images/hamburger.svg'}\n              alt='image not found'\n              id='hamburger'\n              className={this.state.menu ? 'hidden' : ''}\n              onClick={this.toggleMenu}\n            />\n          </div>\n        </div>\n        <div >\n          <h3> Yuva Chang </h3>\n          <img className='image' id='headshot' src='favicon.ico' alt='wtf' />\n        </div>\n        <Menu toggleMenu={this.toggleMenu} visible={this.state.menu} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}